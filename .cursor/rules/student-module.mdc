---
description: 
globs: 
alwaysApply: false
---
# Модуль Student - Руководство по использованию

## Структура модуля
Модуль student состоит из двух основных файлов:
- [app/endpoints/student.py](mdc:app/endpoints/student.py) - API эндпоинты для работы со студентами
- [app/crud/student.py](mdc:app/crud/student.py) - CRUD операции для работы с данными студентов

## Основные операции

### API Эндпоинты
Все эндпоинты требуют роль ADMIN для доступа:

1. Создание студента
   - POST `/students/`
   - Требует данные StudentCreate
   - Проверяет существование клиента

2. Получение списка студентов
   - GET `/students/`
   - Возвращает список всех студентов

3. Получение студента по ID
   - GET `/students/{student_id}`
   - Возвращает данные конкретного студента

4. Обновление информации
   - PATCH `/students/{student_id}`
   - Частичное обновление данных студента

5. Управление статусом
   - PATCH `/students/{student_id}/status`
   - Активация/деактивация студента
   - Проверяет статус родительского клиента

6. Получение студентов клиента
   - GET `/students/client/{client_id}`
   - Список студентов конкретного клиента

7. История платежей
   - GET `/students/{student_id}/payments`
   - История платежей студента

### CRUD Операции

1. Создание студента:
   - Проверка существования клиента
   - Валидация данных
   - Транзакционное создание

2. Обновление данных:
   - Частичное обновление полей
   - Проверка существования нового клиента
   - Валидация изменений

3. Управление статусом:
   - Проверка статуса родительского клиента
   - Установка даты деактивации
   - Транзакционное обновление

## Важные правила

1. Все операции требуют роль ADMIN
2. При активации студента проверяется статус родительского клиента
3. Деактивация автоматически устанавливает дату деактивации
4. Все операции с данными выполняются транзакционно
5. При ошибках выполняется rollback транзакций



